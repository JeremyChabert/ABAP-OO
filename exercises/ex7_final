*&---------------------------------------------------------------------*
*& Report ZTRAINING_OO_JCT3
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ztraining_oo_jct3.

CLASS lcl_tank DEFINITION.
  PUBLIC SECTION.
    DATA : mv_max_vol TYPE i,
           mv_vol     TYPE i.
    METHODS: get_fuel_level RETURNING VALUE(rv_level) TYPE f,
      constructor
        IMPORTING iv_width  TYPE i DEFAULT 10 "m
                  iv_length TYPE i DEFAULT 10 "m
                  iv_depth  TYPE i DEFAULT 5, "m
      fill_tank,
      get_weight RETURNING VALUE(rv_weight) TYPE i.
ENDCLASS.

CLASS lcl_tank IMPLEMENTATION.
  METHOD constructor.
    mv_max_vol = iv_width * iv_length * iv_depth. "m3
  ENDMETHOD.
  METHOD get_fuel_level.
    rv_level = ( mv_vol / mv_max_vol ) * 95.
  ENDMETHOD.
  METHOD fill_tank.
    mv_vol = mv_max_vol.
  ENDMETHOD.
  METHOD get_weight.
    rv_weight = mv_max_vol * 800. "volumic mass of kerosene
  ENDMETHOD.
ENDCLASS.

CLASS lcl_cargo    DEFINITION DEFERRED.
CLASS lcl_airplane DEFINITION DEFERRED.

CLASS lcl_flight DEFINITION ABSTRACT.

  PUBLIC SECTION.
    CONSTANTS: mv_manufacturer TYPE string VALUE 'Airbus'.
    CLASS-DATA: mv_nb_of_planes TYPE i,
                mot_flights     TYPE TABLE OF REF TO lcl_flight.
    DATA : mv_plane_number  TYPE string,
           mv_nb_seats      TYPE i,
           mv_nb_passengers TYPE i,
           mb_on_ground     TYPE abap_bool,
           mv_company       TYPE string.
    CLASS-METHODS : class_constructor,
      add_flight IMPORTING iv_plane_number  TYPE int2
                           iv_company       TYPE any
                           iv_type          TYPE zdeflighttype
                 RETURNING VALUE(ro_flight) TYPE REF TO lcl_flight,
      get_nb_flights RETURNING VALUE(rv_nb_flights) TYPE i.
    METHODS: constructor IMPORTING iv_plane_number TYPE int2
                                   iv_company      TYPE any,
      get_free_seats FINAL RETURNING VALUE(rv_nb_seats) TYPE i,
      declare_take_off,
      take_off,
      estimate_fuel_consumption ABSTRACT IMPORTING iv_distance TYPE i RETURNING VALUE(re_fuel) TYPE f .
  PROTECTED SECTION.

    DATA : mot_tank TYPE TABLE OF REF TO lcl_tank.
    CLASS-DATA : mv_weight TYPE i.
    CONSTANTS: c_factor TYPE f VALUE '0.000012'.

  PRIVATE SECTION.
    CONSTANTS: c_manufacturer_key TYPE string VALUE 'AIB_FAL350'.
    DATA : mv_serial_number TYPE string.
    CLASS-DATA: mv_cockpit_firmware TYPE string,
                mo_random_gen       TYPE REF TO cl_abap_random_int,
                mv_nb_flights       TYPE i.

ENDCLASS.



CLASS lcl_cargo DEFINITION FINAL INHERITING FROM lcl_flight.
  PUBLIC SECTION.
    DATA : mv_packages              TYPE i,
           mv_total_packages_weight TYPE i,
           mv_volume                TYPE i.

    METHODS : constructor IMPORTING  iv_plane_number TYPE int2 iv_company TYPE any,
      add_package IMPORTING iv_volume TYPE i
                            iv_weight TYPE i,
      estimate_fuel_consumption REDEFINITION.
ENDCLASS.

CLASS lcl_airplane DEFINITION INHERITING FROM lcl_flight.
  PUBLIC SECTION.
    DATA : mv_luggages TYPE i,
           mv_airline  TYPE string.
    CONSTANTS : c_avg_weight      TYPE i VALUE 75,
                c_avg_lugg_weight TYPE i VALUE 22.
    METHODS : constructor IMPORTING iv_plane_number TYPE int2 iv_airline TYPE any,
      estimate_fuel_consumption REDEFINITION,
      add_passengers IMPORTING iv_passengers TYPE i
                               iv_luggages   TYPE i.

ENDCLASS.
CLASS lcl_flight IMPLEMENTATION.
  METHOD  class_constructor.

    DATA: n    TYPE i,
          seed TYPE i.

    seed = cl_abap_random=>seed( ).

    cl_abap_random_int=>create(
      EXPORTING
        seed = seed
        min = 0
        max = 10000
      RECEIVING
        prng = mo_random_gen
    ).

    mv_weight = 115000. "weight of A350Neo w/o kerosene (in kg)

  ENDMETHOD.
  METHOD 	constructor.
    mv_plane_number = iv_plane_number.
    mv_company  =  iv_company.
    mv_nb_seats = 250.
    mv_serial_number = mo_random_gen->get_next( ).
    "1st tank
    DATA(lo_tank) = NEW lcl_tank( ).
    APPEND lo_tank TO mot_tank.
    "2nd tank
    lo_tank = NEW lcl_tank( ).
    APPEND lo_tank TO mot_tank.
    ADD 1 TO mv_nb_flights.

  ENDMETHOD.
  METHOD get_free_seats.
    rv_nb_seats = mv_nb_seats - mv_nb_passengers..
  ENDMETHOD.
  METHOD add_flight.

    CASE iv_type.
      WHEN 'A'.
        CREATE OBJECT ro_flight TYPE lcl_airplane
          EXPORTING
            iv_plane_number = iv_plane_number
            iv_airline      = iv_company.

      WHEN 'C'.
        CREATE OBJECT ro_flight TYPE lcl_cargo
          EXPORTING
            iv_plane_number = iv_plane_number
            iv_company      = iv_company.
    ENDCASE.

    APPEND ro_flight TO mot_flights.

  ENDMETHOD.
  METHOD declare_take_off.
    WRITE: 'Flight' && mv_serial_number && 'taking off'.
  ENDMETHOD.
  METHOD take_off.
    mb_on_ground = abap_false.
*    me->declare_take_off( ).
    "OR
    declare_take_off( ).
    "OR
*    CALL METHOD declare_take_off( ).
  ENDMETHOD.
  METHOD get_nb_flights.
    rv_nb_flights = mv_nb_flights.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_airplane IMPLEMENTATION.

  METHOD constructor.

    super->constructor(
      EXPORTING
        iv_plane_number = iv_plane_number
        iv_company      = iv_airline
    ).
    mv_airline =  iv_airline.

  ENDMETHOD.

  METHOD estimate_fuel_consumption.
    DATA lv_total_weight TYPE i.
    LOOP AT mot_tank INTO DATA(lo_tank).
      DATA(lv_tank_weight) = lo_tank->get_weight( ).
      ADD lv_tank_weight TO lv_total_weight.
    ENDLOOP.
    ADD mv_weight TO lv_total_weight.
    DATA(lv_pass_n_lugg_weight) = mv_nb_passengers * c_avg_weight + mv_luggages * c_avg_lugg_weight.
    ADD lv_pass_n_lugg_weight TO lv_total_weight.
    re_fuel = ceil( lv_total_weight * iv_distance * c_factor ).
  ENDMETHOD.
  METHOD add_passengers.
    ADD  iv_passengers TO mv_nb_passengers .
    ADD  iv_passengers TO mv_luggages.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_cargo IMPLEMENTATION.

  METHOD constructor.
    super->constructor(
      EXPORTING
        iv_plane_number = iv_plane_number
        iv_company      = iv_company
    ).
    DATA(lo_extra_tank) = NEW lcl_tank( ).
    APPEND lo_extra_tank TO mot_tank.
  ENDMETHOD.

  METHOD estimate_fuel_consumption.
    DATA lv_total_weight TYPE i.
    LOOP AT mot_tank INTO DATA(lo_tank).
      DATA(lv_tank_weight) = lo_tank->get_weight( ).
      ADD lv_tank_weight TO lv_total_weight.
    ENDLOOP.

    ADD mv_weight TO lv_total_weight.
    re_fuel = ceil( lv_total_weight * iv_distance * c_factor ).
  ENDMETHOD.

  METHOD add_package.
    ADD iv_volume TO mv_volume.
    ADD iv_weight TO mv_total_packages_weight.
  ENDMETHOD.

ENDCLASS.



END-OF-SELECTION.

*  DATA : lot_flight TYPE TABLE OF REF TO lcl_flight.
*
*  DATA(lo_flight) = lcl_flight=>add_flight(
*        iv_plane_number = '1234'
*        iv_company    = 'SIA').
*
*  APPEND lo_flight TO lot_flight.
*
*  lo_flight = lcl_flight=>add_flight(
*        iv_plane_number = '9443'
*        iv_company    = 'AFR').
*
*  APPEND lo_flight TO lot_flight.
*
*  lo_flight = lcl_flight=>add_flight(
*        iv_plane_number = '5434'
*        iv_company    = 'LFH').
*
*  APPEND lo_flight TO lot_flight.
*
*  LOOP AT lot_flight INTO lo_flight.
*    DATA(lv_passengers) = sy-tabix * 35.
*    WRITE:/ lo_flight->get_free_seats( ).
*    lo_flight->add_passengers( lv_passengers ).
*    WRITE:/ lo_flight->get_free_seats( ).
*    lo_flight->take_off( ).
*    WRITE:/ lo_flight->estimate_fuel_consumption( iv_distance = 1000 ).
*  ENDLOOP.


*  DATA : lo_flight              TYPE REF TO lcl_flight,
*         lo_passengers_airplane TYPE REF TO lcl_airplane.
*
*
*  DATA(lo_cargo) = NEW lcl_cargo(
*      iv_plane_number = 1324
*      iv_company      = 'DHL'
*  ).
*
*  CHECK sy-subrc EQ 0. "to set debugger.
  "#7.1
*  DATA : lv_dynamic_type TYPE string,
*         lo_flight       TYPE REF TO lcl_flight,
*         lot_flights     TYPE TABLE OF REF TO lcl_flight.
*
  SELECT * FROM zflight_abapoo INTO TABLE @DATA(lt_flights).
*
*  LOOP AT lt_flights INTO DATA(ls_flight).
*
*    CASE ls_flight-flight_type.
*
*      WHEN 'A'.
*        CREATE OBJECT lo_flight TYPE lcl_airplane
*          EXPORTING
*            iv_plane_number = ls_flight-flight_number
*            iv_airline      = ls_flight-company.
*      WHEN 'C'.
*        CREATE OBJECT lo_flight TYPE lcl_cargo
*          EXPORTING
*            iv_plane_number = ls_flight-flight_number
*            iv_company      = ls_flight-company.
*      WHEN OTHERS.
*
*    ENDCASE.
*
*    APPEND lo_flight TO lot_flights.
*
*  ENDLOOP.
*
*  LOOP AT lot_flights INTO lo_flight.
*    WRITE:/ lo_flight->estimate_fuel_consumption( 15000 ).
*  ENDLOOP.


  "#7.2
*  DATA : lv_dynamic_type TYPE string,
*         lot_flights     TYPE TABLE OF REF TO lcl_flight.
*
*  SELECT * FROM zflight_abapoo INTO TABLE @DATA(lt_flights).
*
*  LOOP AT lt_flights INTO DATA(ls_flight).
*
*    CASE ls_flight-flight_type.
*
*      WHEN 'A'.
*        DATA(lo_airplane) = NEW lcl_airplane(
*        iv_plane_number =  ls_flight-flight_number
*        iv_airline      =  ls_flight-company ).
*        APPEND lo_airplane TO lot_flights.
*      WHEN 'C'.
*        DATA(lo_cargo) = NEW lcl_cargo(
*        iv_plane_number =  ls_flight-flight_number
*        iv_company      =  ls_flight-company ).
*        APPEND lo_cargo TO lot_flights.
*      WHEN OTHERS.
*
*    ENDCASE.
*
*  ENDLOOP.
*
*  LOOP AT lot_flights INTO DATA(lo_flight).
*    WRITE:/ lo_flight->estimate_fuel_consumption( 15000 ).
*  ENDLOOP.
*
*"#7.3
  LOOP AT lt_flights INTO DATA(ls_flight).

    DATA(lo_flight) = lcl_flight=>add_flight(
      EXPORTING
        iv_plane_number = ls_flight-flight_number
        iv_company      = ls_flight-company
        iv_type         = ls_flight-flight_type
    ).

  ENDLOOP.

  LOOP AT lcl_flight=>mot_flights INTO lo_flight.
    WRITE:/ lo_flight->estimate_fuel_consumption( 15000 ).
  ENDLOOP.
